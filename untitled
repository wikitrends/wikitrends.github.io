<!DOCTYPE html>
<meta charset="utf-8">

<head>
    <!-- Bootstrap and JQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <!-- <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
    -->

    <!-- Font Files -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300' rel='stylesheet' type='text/css'>
    <!-- <link href="http://netdna.bootstrapcddn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet" type="text/css"> 
    -->
    <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900' rel='stylesheet' type='text/css'>


    <!-- StyleSheets -->
    <link href="css/style.css" rel="stylesheet">

    <!-- Core D3 files -->
    <script src="http://d3js.org/d3.v3.js"></script>

    <!-- Extensions or Addons -->
    <script src="http://cdn.jsdelivr.net/lodash/2.4.1/lodash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.3/moment.min.js"></script>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/3.9.3/lodash.min.js"></script>

</head>

<body>

    <i class="fa fa-search"></i>
    <input type='text' name='searchQuery' placeholder='Search' /></input>

    <div class="num_results"></div>
    <div id="results_pane">

    </div>
    <div id="one"></div>

</body>

<script>
/* The Search Functionality Starts */

$(document).ready(function() {
    $('input[type=text]').bind('change paste keyup', function() {
        //console.log('changing');
        var query = $('input[name=searchQuery]').val();
        if (query.length >= 3) search(query);
        else if (query.length === 0) resetDisplay();
    });
});

var search = function(query) {
    $.ajax({
        url: 'http://en.wikipedia.org/w/api.php?action=query&list=search&format=json&srsearch=' + query,
        type: 'GET',
        dataType: 'jsonp',
        headers: {
            'Api-User-Agent': 'WikiReader/0.1.0'
        }
    }).success(function(data, status) {
        updateNumResults(data.query);
        requestArticleExtracts(data.query);
    }).error(function(data, status) {
        console.log("ERROR! " + status);
    });
};

var requestArticleExtracts = function(queryResult) {
    // Request extracts for each of the articles found in the search
    var extractQuery = 'http://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exsentences=2&exlimit=max&exintro=&explaintext=&titles=';

    // Add each page title to the query
    var searchResults = queryResult.search;
    for (var i = 0; i < searchResults.length - 1; i++) {
        extractQuery += searchResults[i].title + '|';
    }
    extractQuery += searchResults[searchResults.length - 1].title;
    extractQuery = encodeURI(extractQuery);

    $.ajax({
        url: extractQuery,
        type: 'GET',
        dataType: 'jsonp',
        headers: {
            'Api-User-Agent': 'WikiReader/0.1.0'
        }
    }).success(function(data, status) {
        updateDisplay(data);
    })
}

var updateNumResults = function(queryResult) {
    $('.num_results').html("<p class='num_results'>Showing results 1 to 10 of " + queryResult.searchinfo.totalhits + "</p>");
};

var resetDisplay = function() {
    $('#results_pane').html('');
    $('.num_results').html('');
}

var updateDisplay = function(queryResult) {
    //console.log(queryResult);
    var pages = queryResult.query.pages;

    // Find the results pane and reset it
    $('#results_pane').html('');

    for (var pId in pages) {
        // I pray for forgiveness.
        // Todo: look for lightweight template libraries
        var htmlToAdd = "<div class='result_card'>";
        // htmlToAdd += "<a target='_' "  href='http://en.wikipedia.org/?curid=" + pages[pId].pageid + "'>";

        // Using pages[pId].title doesn't work in API call. Hence use pageID
        htmlToAdd += "<a nohref onClick=\"grandPlotter(" + pages[pId].pageid + ")\">"

        //console.log(pages[pId].title)
        //test(pages[pId].title)
        //htmlToAdd += "<a href='javascript:grandPlotter(" + pages[pId].title + ")'>";
        htmlToAdd += "<p>" + pages[pId].title + "</p>";
        //htmlToAdd += "<p>" + pages[pId].extract + "</p></a></div>";
        $('#results_pane').append(htmlToAdd);
    }
}

/* The search functionality ends */

// grandPlotter("April_2015_Nepal_earthquake")

function grandPlotter(pageIDin) {

    $('#one').html('');

    // Loader Section begin

    function loader(config) {
        return function() {
            var radius = Math.min(config.width, config.height) / 2;
            var tau = 2 * Math.PI;

            var arc = d3.svg.arc()
                .innerRadius(radius * 0.2)
                .outerRadius(radius * 0.4)
                .startAngle(0);

            var svg = d3.select(config.container).append("svg")
                .attr("id", config.id)
                .attr("width", config.width)
                .attr("height", config.height)
                .append("g")
                .attr("transform", "translate(" + config.width / 2 + "," + config.height / 2 + ")")

            var background = svg.append("path")
                .datum({
                    endAngle: 0.33 * tau
                })
                .style("fill", "#4D4D4D")
                .attr("d", arc)
                .call(spin, 1500)

            function spin(selection, duration) {
                selection.transition()
                    .ease("linear")
                    .duration(duration)
                    .attrTween("transform", function() {
                        return d3.interpolateString("rotate(0)", "rotate(360)");
                    });

                setTimeout(function() {
                    spin(selection, duration);
                }, duration);
            }

            function transitionFunction(path) {
                path.transition()
                    .duration(7500)
                    .attrTween("stroke-dasharray", tweenDash)
                    .each("end", function() {
                        d3.select(this).call(transition);
                    });
            }

        };
    }

    var myLoader = loader({
        width: 960,
        height: 500,
        container: "#one",
        id: "one"
    });
    myLoader();

    // Loader Container End

    var jsonObject;
    var lastRevID;

    var pageID = pageIDin;

    var linkInitial = "http://en.wikipedia.org/w/api.php?action=query&prop=revisions&format=json&rvprop=ids%7Ctimestamp%7Cuser%7Cuserid%7Csize&rvlimit=1000&rvcontentformat=text%2Fplain" + "&pageids=" + pageID + "&format=json&callback=?"

    var linkSubsequent = "http://en.wikipedia.org/w/api.php?action=query&prop=revisions&format=json&rvprop=ids%7Ctimestamp%7Cuser%7Cuserid%7Csize&rvlimit=1000&rvcontentformat=text%2Fplain" + "&rvstartid=" + lastRevID + "&pageids=" + pageID + "&format=json&callback=?"

    function getData(url, callback) {
        return $.ajax({

            url: url,

            dataType: 'json',
            type: 'GET',
            headers: {
                'Api-User-Agent': 'Example/1.0'
            },
            success: callback,
        });
    }

    var finaljsonObject = [];

    function pageEdits(url) {

        getData(url, function(data) {

            jsonObject = data;

            // Clean up Data
            var pageID = Object.keys(jsonObject.query.pages)[0]
            jsonObject = jsonObject.query.pages[pageID].revisions

            // Get last revision ID
            lastRevID = jsonObject[Object.keys(jsonObject)[Object.keys(jsonObject).length - 1]].revid

            console.log(lastRevID)

            // This is the length of the useful JSON object
            console.log(Object.keys(jsonObject).length)

            // Run this part of the if - else everytime except for the last time.
            if (Object.keys(jsonObject).length > 2) {

                pageEdits("http://en.wikipedia.org/w/api.php?action=query&prop=revisions&format=json&rvprop=ids%7Ctimestamp%7Cuser%7Cuserid%7Csize&rvlimit=1000&rvcontentformat=text%2Fplain" + "&rvstartid=" + lastRevID + "&pageids=" + pageID + "&format=json&callback=?")

                finaljsonObject = finaljsonObject.concat(jsonObject)
            }

            // Run this part of the if - else everytime only for the last time when the callback exits.
            else {

                // initialises runNow function which has the d3 stuff. Passes the concated data as the parameter.
                runNow(finaljsonObject)
                return finaljsonObject

            }
        })
    }

    function runNow(dataSource) {

        function normalPlotter(dataSource, idname, interpolation, parameter, plotParameter) {

            $('#one').html('');

            var margin = {
                    top: 20,
                    right: 20,
                    bottom: 30,
                    left: 50
                },
                width = 1008 - margin.left - margin.right,
                height = 572 - margin.top - margin.bottom;

            //var parseDate = d3.time.format.utc("%Y-%m-%dT%H:%M:%SZ").parse;
            var parseDate = d3.time.format.utc("%Y-%m-%dT%H:%M:%S.%LZ").parse;

            var x = d3.time.scale()
                .range([30, width]);

            var y = d3.scale.linear()
                .range([height, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left");

            var upperline = d3.svg.line()
                .interpolate(interpolation)
                .x(function(d) {
                    return x(parseDate(d.key));
                })
                .y(function(d) {

                    // console.log(d[plotParameter])

                    return y(d.values);
                    // }
                    // } else {
                    //     return y(0)
                    // }
                });

            // var bottomline = d3.svg.line()
            //     .interpolate(interpolation)
            //     .x(function(d) {
            //         return x(d.timestamp);
            //     })
            //     .y(function(d) {
            //         if (d[parameter] > 0) {
            //             return y(0)
            //         } else {
            //             return y(d[parameter]);
            //         }
            //     });

            var svg = d3.select("body").select(idname).append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                //.append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            // var svgImage = d3.select("body").select(idname).select("svg").append("svg")
            //     .attr("width", width + margin.left + margin.right)
            //     .attr("height", height + margin.top + margin.bottom)
            //     .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            //     .attr("viewBox", "\"" + margin.left + ", 0," + width + margin.left + margin.right + "," + height + margin.top + margin.bottom + "\"")
            //     .attr("preserveAspectRatio", "none")
            //     //.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//             <svg width="70px" height="70px" viewBox="50 50 70 70">    
//     <image x="0" y="0" width="200" height="200" 
//         xlink:href="http://placekitten.com/200/200" clip-path="url(#myClip)">
//     </image>
// </svg>
           


            

                var previousParameter = 0;

            dataSource.forEach(function(d) {

                var tempDate = d.timestamp;

                // // Hours
                // tempDate = tempDate.substring(0, 13);
                // tempDate = tempDate.concat(":00:00.000Z");

                // Days
                tempDate = tempDate.substring(0, 10);
                tempDate = tempDate.concat("T00:00:01.000Z");

                d.timestamp = tempDate;

                d.values = 1;

            });

            var data = d3.nest()
                .key(function(d) {
                    return d.timestamp;
                })
                .rollup(function(d) {
                    return d3.sum(d, function(g) {
                        return g.values;
                    });
                }).entries(dataSource);

            // Attempting to fix the Zero Date problem

            // BEWARE BEWARE BEWARE!
            // Countless hours have been spent trying to get this part to work. 
            // TLDR; On MediaWiki APIs, time runs backwards!

            var previousDateActual = "";
            var theDayMisnomerPlus;

            data.forEach(function(d, i) {

                var theDayMisnomerMinus = moment(d.key).add(1, 'days')

                var theDay = moment(d.key)

                var previousDate = moment(previousDateActual)

                if (JSON.stringify(theDayMisnomerMinus) != JSON.stringify(previousDate)) {

                    // tempIn is just of temporary string conversions.
                    var tempIn = JSON.stringify(theDayMisnomerMinus).replace("\"", "").replace("\"", "")
                    console.log(tempIn)

                    // Adding the new Zeroed entry at relevant location so as to avoid sorting.
                    data.splice(i, 1, {
                        key: tempIn,
                        values: 0
                    })

                } else {}

                // START: At all costs, this needs to be in front before -> theDayMisnomerPlus = moment(d.key).subtract(1, 'days')
                if (i != 0) {
                    if (JSON.stringify(theDayMisnomerPlus) != JSON.stringify(d.key)) {

                        // tempIn is just of temporary string conversions. '"' need to be removed.å
                        var tempIn = JSON.stringify(theDayMisnomerPlus).replace("\"", "").replace("\"", "")
                        console.log(tempIn)

                        // Adding the new Zeroed entry at relevant location so as to avoid sorting.
                        data.splice(i - 1, 1, {
                            key: tempIn,
                            values: 0
                        })

                    } else {}
                }

                // END

                // Checks for the next 
                theDayMisnomerPlus = moment(d.key).subtract(1, 'days')

                // PreviosDateActual is the actual date which follows the current date. It is a misnomer too. 
                previousDateActual = d.key;

            })

            x.domain(d3.extent(data, function(d) {
                return parseDate(d.key);
            }))
            y.domain(d3.extent(data, function(d) {
                return d.values;
            }));

            var heightAxis = height + 10;

            //console.log(data)

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + heightAxis + ")")
                .call(xAxis);

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                //.text("Ratings");

            svg.append("path")
                .datum(data)
                .attr("class", "upperline")
                .attr("d", upperline)
                .attr("fill", "none")
                .attr("stroke", "#3FC380")
                .attr("stroke-width", "1px")


         // var imgs = svgImage.selectAll("image").data([0]);
         //    imgs.enter()
         //        .append("svg:image")
         //        .attr("xlink:href", "http://upload.wikimedia.org/wikipedia/commons/0/0b/Nepal_relief_location_map.jpg")
         //        // .attr("x", "0")
         //        // .attr("y", "0")
         //        .attr("width", width + margin.left + margin.right)
         //        .attr("overflow-x", "hidden")
         //        .attr("overflow-y", "hidden")
         //        // .attr("width", "100%")
         //        .attr("height", height + margin.top + margin.bottom);

         //    var opacityRect = svg.append("rect")
         //         // .attr("x", 10)
         //         // .attr("y", 10)
         //        .attr("width", width)
         //        .attr("fill", "black")
         //        .attr("opacity", 0.4)
         //        .attr("height", height);


        }


        var dataSource = dataSource

        normalPlotter(dataSource, "#one", "bundle", "size", "size")

        //console.log(dataSource)

    }
    pageEdits(linkInitial)
}
</script>